// Modified from https://github.com/cloudflare/wirefilter/blob/master/wirefilter-parser/src/grammar.pest

// Expressions
// ----------------------------------------------------------------------
filter = _{ SOI ~ expr? ~ EOI }
raw_predicates = _{ SOI ~ ( (non_identifier)* ~ predicate ~ (non_identifier)* )* ~ EOI }

// encodes operator precedence (AND over OR)
expr = { sub_expr ~ (or_op ~ sub_expr)* }
sub_expr = { term ~ (and_op ~ term)* }
term = _{ predicate | "(" ~ expr ~ ")" }
predicate = { protocol ~ ("." ~ (combined_field | field) ~ bin_op ~ value)? }

// Identifiers
// ----------------------------------------------------------------------
protocol = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC| "_")* }
field = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
combined_field = @{ "addr" | "port" }

// order matters! Parser will try from left to right
value = { ipv4_lit | ipv6_lit | int_range | int_lit | str_lit }

ipv4_addr = @{
    ASCII_DIGIT{1,3} ~ ("." ~ ASCII_DIGIT{1,3}){3}
}
ipv4_prefix = @{ ASCII_DIGIT{1,2} }
ipv4_lit = ${ ipv4_addr ~ ("/" ~ ipv4_prefix)? }

ipv6_addr = @{
    (":" | ASCII_ALPHANUMERIC{1,4}) ~ ":" ~ (ipv4_addr | ASCII_ALPHANUMERIC{1,4} | ":")*
}
ipv6_prefix = @{ ASCII_DIGIT{1,3} }
ipv6_lit = ${ ipv6_addr ~ ("/" ~ ipv6_prefix)? }

// Integers
int_lit = @{ ASCII_DIGIT+ }
int_range = ${ int_lit ~ ".." ~ int_lit }

// Strings
str_lit = _{ "\'" ~ text ~ "\'" }
text = { (!("\'") ~ ANY)+ }

// Logical operators
// ----------------------------------------------------------------------
or_op = { "||" | "or" | "OR" }
and_op = { "&&" | "and" | "AND" }
not_op = { "!" | "not" | "NOT" }  // not yet supported, temp placeholder

// Binary operators
// ----------------------------------------------------------------------
bin_op = {
    eq_op | ne_op | ge_op | le_op | gt_op | lt_op | in_op | re_op | en_op
}

eq_op = { "=" }
ne_op = { "!=" | "ne" }
ge_op = { ">=" | "ge" }
le_op = { "<=" | "le" }
gt_op = { ">" | "gt" }
lt_op = { "<" | "lt" }
in_op = { "in" }
re_op = { "~" | "matches" }
en_op = { "eq" }

// Miscellaneous
// ----------------------------------------------------------------------
WHITESPACE = _{ " " | NEWLINE }
non_identifier = _{ or_op | and_op | not_op | "(" | ")" }
