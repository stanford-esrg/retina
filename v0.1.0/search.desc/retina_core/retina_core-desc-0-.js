searchState.loadedDescShard("retina_core", 0, "An ergonomic framework for high speed network traffic …\nA generic connection identifier.\nConnection 5-tuple.\nA packet buffer.\nThe Retina runtime.\nConfiguration options.\nConverts a 5-tuple to a non-directional connection …\nReturns the contents of the Mbuf as a byte slice.\nReturns the length of the data in the Mbuf.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a byte slice of data with length count at offset.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new runtime from the <code>config</code> settings, filter, …\nThe originator connection endpoint.\nThe layer-4 protocol.\nProtocol parsing and manipulation.\nThe responder connection endpoint.\nReturns the application thread ID of the execution unit.\nReads the timestamp counter (TSC) register.\nRun Retina for the duration specified in the configuration …\nSubscribable data types.\nUtility modules.\nConnection tracking options.\nLive statistics display options.\nLogging options.\nMemory pool options.\nStatistics logging and live monitoring operations.\nOffline traffic analysis options.\nLive traffic analysis options.\nNetwork interface options.\nRuntime configuration options.\nSink core options.\nThe size of the per-core object cache. It is recommended …\nNumber of mbufs allocated per mempool. The maximum value …\nConnection tracking settings.\nSink core identifier.\nList of packet processing cores used to poll the interface.\nLoads a default configuration file.\nPCI address of interface.\nLog directory path. If logging is enabled, Retina will …\nLive display configuration. Defaults to <code>None</code> (no output).\nIf set, will pass supplementary arguments to DPDK EAL (see …\nIf set, the applicaton will stop after <code>duration</code> seconds. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf set, will attempt to offload parts of the filter to the …\nHow often to log port statistics (in milliseconds). …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads a configuration file from <code>path</code>.\nLogging configuration. Defaults to <code>None</code> (no logs).\nMain core identifier. Initializes and manages packet …\nMaximum number of connections that can be tracked …\nMaximum number of out-of-order packets allowed per TCP …\nPer-mempool settings.\nDisplay live mempool usage. Defaults to <code>true</code>.\nLive performance monitoring. Defaults to <code>None</code>.\nMaximum transmission unit (in bytes) allowed for ingress …\nMaximum frame size, equivalent to MTU on a live interface. …\nNumber of RSS redirection table buckets to use for receive …\nSets the number of memory channels to use.\nThe number of RX descriptors per receive queue. Defaults …\nOffline mode settings. Either <code>online</code> or <code>offline</code> must be …\nOnline mode settings. Either <code>online</code> or <code>offline</code> must be …\nPath to packet capture (pcap) file.\nList of live port statistics to display.\nList of port statistics to log.\nList of network interfaces to read from.\nWhether promiscuous mode is enabled for all ports. …\nSink core configuration. Defaults to <code>None</code>.\nSuppress DPDK runtime logging and telemetry output. …\nInactivity time between the first and second packet of a …\nA TCP connection can be inactive for up to this amount of …\nDisplay live throughputs. Defaults to <code>true</code>.\nFrequency to check for inactive streams (in milliseconds). …\nA UDP connection can be inactive for up to this amount of …\nTypes for parsing and manipulating packet-level network …\nTypes for parsing and manipulating stream-level network …\nRepresents a single packet.\nRepresents a packet header.\nEthernet packet.\nOffset from the beginning of the header to the start of …\nIPv4 packet.\nIPv6 packet.\nOffset from beginning of the header to start of the …\nReference to the underlying packet buffer.\nNext level IANA protocol number.\nOffset from the beginning of the packet buffer to the …\nParses a <code>Packet</code> from the outer encapsulating <code>Packet</code>’s …\nParses the <code>Packet</code>’s payload as a new <code>Packet</code> of type <code>T</code>.\nSize of the fixed portion of the header in bytes.\nTCP packet.\nUDP packet.\nAn Ethernet frame.\nReturns the destination MAC address.\nReturns the encapsulated protocol identifier for untagged …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the source MAC address.\nAn IPv4 packet.\nReturns <code>true</code> if the Don’t Fragment flag is set.\nReturns the differentiated services code point (DSCP).\nReturns the differentiated services field.\nReturns the receiver’s IPv4 address.\nReturns the explicit congestion notification (ECN).\nReturns the 3-bit IP flags.\nReturns the 16-bit field containing the 3-bit flags and …\nReturns the fragment offset in units of 8 bytes.\nReturns the argument unchanged.\nReturns the IPv4 header checksum.\nReturns the identification field.\nReturns the header length measured in 32-bit words (IHL).\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the More Fragments flag is set.\nReturns the encapsulated protocol identifier.\nReturns <code>true</code> if the Reserved flag is set.\nReturns the sender’s IPv4 address.\nReturns the time to live (TTL) of the packet.\nReturns the total length of the packet in bytes, including …\nReturns the type of service (former name of the …\nReturns the IP protocol version.\nReturns the 8-bit field containing the version and IHL.\nAn IPv6 packet.\nReturns the differentiated services code point (DSCP).\nReturns the receiver’s IPv6 address.\nReturns the explicit congestion notification (ECN).\nReturns the flow label.\nReturns the argument unchanged.\nReturns hop limit/time to live of the packet.\nCalls <code>U::from(self)</code>.\nReturns the encapsulated protocol identifier.\nReturns the length of the payload in bytes.\nReturns the sender’s IPv6 address.\nReturns the traffic class (former name of differentiated …\nReturns the IP protocol version.\nReturns the 32-bit field containing the version, traffic …\nTCP assigned protocol number.\nA TCP packet.\nReturns <code>true</code> if the acknowledgment flag is set.\nReturns the acknowledgment number.\nReturns the 16-bit checksum field.\nReturns <code>true</code> if the congestion window reduced flag is set.\nReturns the header length measured in 32-bit words.\nReturns the 8-bit field containing the data offset, 3 …\nReturns the receiving port.\nReturns <code>true</code> if the ECN-Echo flag is set.\nReturns <code>true</code> if the FIN flag is set.\nReturns the 8-bit TCP flags.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the (historical) nonce sum flag is set.\nReturns <code>true</code> if the push flag is set.\nReturns the reserved bits.\nReturns <code>true</code> if the reset flag is set.\nReturns the sequence number.\nReturns the sending port.\nReturns <code>true</code> if the synchronize flag is set.\nReturns <code>true</code> if both <code>SYN</code> and <code>ACK</code> flags are set.\nReturns <code>true</code> if the urgent pointer flag is set.\nReturns the urgent pointer.\nReturns the size of the receive window in window size …\nUDP assigned protocol number.\nA UDP packet.\nReturns the UDP checksum.\nReturns the receiving port.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the length of packet (both header and payload) in …\nReturns the sending port.\nDNS transaction parsing.\nHTTP transaction parsing.\nQUIC protocol parser.\nTLS handshake parsing.\nRData types.\nParsed DNS transaction contents.\nA DNS Query.\nA DNS Record.\nA DNS Response.\nA DNS mail exchange (MX) record.\nA DNS start of authority (SOA) record.\nA DNS service (SRV) record.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDNS Query.\nReturns the DNS query domain name, or <code>&quot;&quot;</code> if no query was …\nDNS Response.\nDNS transaction ID.\nParsed HTTP transaction contents.\nAn HTTP Request\nAn HTTP Response\nReturns HTTP cookies sent by the client, or <code>&quot;&quot;</code> if it does …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the domain name of the server specified by the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the HTTP method, or <code>&quot;&quot;</code> if it does not exist.\nHTTP Request.\nReturns the size of the request body in bytes, or <code>0</code> if it …\nReturns the media type of the request resource, or <code>&quot;&quot;</code> if …\nReturns the form of encoding used to transfer the request …\nReturns the HTTP request version, or <code>&quot;&quot;</code> if it does not …\nHTTP Response.\nReturns the size of the request body in bytes, or <code>0</code> if it …\nReturns the media type of the response resource, or <code>&quot;&quot;</code> if …\nReturns the form of encoding used to transfer the response …\nReturns the HTTP response version, or <code>&quot;&quot;</code> if it does not …\nReturns the HTTP status code, or <code>0</code> if it does not exist.\nReturns the HTTP status tet, or <code>0</code> if it does not exist.\nThe pipelined depth into the connection of this …\nReturns the request URI, or <code>&quot;&quot;</code> if it does not exist.\nReturns the user agent string of the user agent, or <code>&quot;&quot;</code> if …\nParsed Quic connections\nErrors Thrown throughout QUIC parsing. These are handled …\nQuic Long Header\nParsed Quic Packet contents\nQuic Short Header\nReturns the destination connection ID of the Quic packet …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the header type of the Quic packet (ie. “long” …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQuic Long header\nReturns the packet type of the Quic packet\nParses Quic packet from bytes\nReturns the number of bytes in the payload of the Quic …\nThe number of bytes contained in the estimated payload\nReturns the source connection ID of the Quic packet or an …\nQuic Short header\nProcesses the connection ID bytes array to a hex string\nReturns the version of the Quic packet\nA raw X509 certificate.\nFinite-field Diffie-Hellman parameters sent by the client …\nElliptic-curve Diffie-Hellman parameters sent by the …\nA parsed TLS ClientHello message.\nKey data sent by the client in a ClientKeyExchange message.\nStores the encrypted premaster secret sent by the client …\nA TLS 1.3 key share entry.\nFinite-field Diffie-Hellman parameters sent by the server …\nElliptic-curve Diffie-Hellman parameters sent by the …\nA parsed TLS ServerHello message.\nKey data sent by the server in a ServerKeyExchange message.\nRSA parameters sent by the server in a ServerKeyExchange …\nParsed TLS handshake contents.\nReturns the cipher suite name chosen by the server, or <code>&quot;&quot;</code> …\nReturns the cipher suite chosen by the server, or <code>None</code> if …\nReturns the list of ALPN protocol names supported by the …\nClient Certificate chain.\nReturns the list of cipher suite names supported by the …\nReturns the list of compression method identifiers …\nReturns the list of extension names sent by the client.\nClientHello message.\nClientKeyExchange message (TLS 1.2 or earlier).\nReturns the hex-encoded client random, or <code>&quot;&quot;</code> if no …\nReturns the list of signature algorithm names supported by …\nReturns the version identifier specified in the …\nReturns the compression method identifier chosen by the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the JA3 fingerprint.\nReturns the client JA3 string, or <code>&quot;&quot;</code> if no ClientHello was …\nReturns the JA3S fingerprint.\nReturns the server JA3S string, or <code>&quot;&quot;</code> if no ServerHello …\nServer Certificate chain.\nReturns the list of extension names sent by the server.\nServerHello message.\nServerKeyExchange message (TLS 1.2 or earlier).\nReturns the hex-encoded server random, or <code>&quot;&quot;</code> if no …\nReturns the version identifier specified in the …\nReturns the name of the server the client is trying to …\nReturns the negotiated TLS handshake version identifier, …\nSuitable for analyzing entire connections, whether as a …\nThe abstraction level of the subscribable type.\nSuitable for analyzing individual packets or frames where …\nSuitable for analyzing session-level data, of which there …\nRepresents a generic subscribable type. All subscribable …\nTracks subscribable types throughout the duration of a …\nConnection records.\nConnection packet stream.\nDNS transactions.\nEthernet frames.\nReturns the argument unchanged.\nHTTP transactions.\nCalls <code>U::from(self)</code>.\nReturns the subscription level.\nCreate a new Trackable type to manage subscription data …\nUpdate tracked subscription data on a full filter match.\nUpdate tracked subscription data on connection termination.\nReturns a list of protocol parsers required to parse the …\nUpdate tracked subscription data after a full filter match.\nUpdate tracked subscription data prior to a full filter …\nProcess a single incoming packet.\nQUIC streams.\nTLS handshakes.\nZero-copy Ethernet frames.\nStart (inclusive) and end (exclusive) interval of …\nA connection record.\nA uni-directional flow.\nMaximum chunk capacity (the maximum number of simultaneous …\nThe set of non-overlapping content intervals. Only applies …\nReturns the client (originator) socket address.\nReturns the number of content gaps at the connection end.\nStarting sequence number of the first byte in the first …\nThe duration of the connection.\nThe connection 5-tuple.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMaps relative sequence number of a content gap to the …\nReturns the connection history.\nConnection history.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum duration of inactivity (the maximum time between …\nMaximum number of simultaneous content gaps.\nReturns the mean number of packet arrivals before a …\nReturns the median number of packet arrivals before a …\nNumber of bytes missed in content gaps at connection end.\nNumber of payload bytes observed in the flow. Does not …\nNumber of late start packets.\nNumber of malformed packets.\nNumber of packets seen for this flow, including malformed …\nOriginator flow.\nResponder flow.\nReturns the server (responder) socket address.\nThe duration between the first and second packets.\nReturns the total number of payload bytes observed, …\nReturns the total number of packets observed in the …\nTimestamp of the first packet.\nEthernet frames in a TCP or UDP connection.\nReturns the associated connection originator’s socket …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the associated connection responder’s socket …\nA parsed DNS transaction and connection metadata.\nReturns the DNS resolver’s socket address.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the DNS server’s socket address.\nAn Ethernet Frame.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA parsed HTTP transaction and connection metadata.\nReturns the client’s socket address.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the server’s socket address.\nA parsed QUIC stream and connection metadata.\nReturns the QUIC client’s socket address.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the QUIC server’s socket address.\nA parsed TLS handshake and connection metadata.\nReturns the client’s socket address.\nParsed TLS handshake data.\nConnection 5-tuple.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the server’s socket address.\nA zero-copy Ethernet frame.\nHelper functions for Base64 encoding and decoding.\nWrapper types for converting packet data to/from network …\nDecodes Base64 string as a byte vector.\nEncodes byte slice as a Base64 string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n128-bit unsigned integer in big-endian order.\n16-bit unsigned integer in big-endian order.\n32-bit unsigned integer in big-endian order.\n64-bit unsigned integer in big-endian order.")