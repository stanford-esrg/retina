searchState.loadedDescShard("retina_datatypes", 0, "Subscribable data types.\nTrait implemented by datatypes that are built from a …\nTrait implemented by datatypes that are built from session …\nTrait implemented by datatypes that are constant throughout\nTrait implemented by datatypes that require inline …\nClear internal data; called if connection no longer …\nVarious individual connection-level subscribable types for …\nA sample connection record that provides various TCP …\nA DNS transaction. Subscribable alias for …\nBuild Self from a parsed session, or return None if …\nBuild Self from a <em>list</em> of sessions, or return None if …\nAn Http transaction. Subscribable alias for …\nInitialize internal data; called once per connection. Note …\nRaw packet-level datatypes.\nVectors of raw packet data. All of these types are …\nA Quic stream. Subscribable alias for …\nA SSH handshake. Subscribable alias for …\nStatic-level datatypes. A data type is considered “static…\nThe stream protocols (lower-case) required for this …\nThe stream protocols (lower-case) required for this …\nA TLS handshake. Subscribable alias for …\nNew datatypes are defined in this module. Newly-defined …\nNew packet in connection received (or reassembled, if …\nThe number of bytes, including headers, observed in a …\nTracks the start (first packet seen) and end (last packet …\nConnection history.\nTracked data for packet inter-arrival times\nThe number of packets observed in a connection\nThe duration of the connection as std::time::Duration\nThe duration of the connection in milliseconds\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInterarrival durations server-to-client (resp.) flow\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStart (inclusive) and end (exclusive) interval of …\nTracks a connection record throughout its lifetime.\nA uni-directional flow.\nMaximum chunk capacity (the maximum number of simultaneous …\nThe set of non-overlapping content intervals. Only applies …\nReturns the client (originator) socket address.\nReturns the number of content gaps at the connection end.\nStarting sequence number of the first byte in the first …\nReturns te duration of the connection.\nTimestamp of the first packet.\nThe connection 5-tuple.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMaps relative sequence number of a content gap to the …\nReturns the connection history.\nThis represents a summary of the connection history in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTimestamp of the last packet (approximate).\nMaximum duration of inactivity (the maximum time between …\nMaximum number of simultaneous content gaps.\nReturns the mean number of packet arrivals before a …\nReturns the median number of packet arrivals before a …\nNumber of bytes missed in content gaps at connection end.\nNumber of late start packets.\nNumber of malformed packets.\nNumber of payload bytes observed in the flow. Does not …\nNumber of packet bytes observed in the flow. Includes …\nNumber of packets seen for this flow, including malformed …\nOriginator flow.\nResponder flow.\nTimestamp of the second packet (approximate).\nReturns the server (responder) socket address.\nThe duration (approximate) between the first and second …\nReturns the total number of payload bytes observed, …\nReturns the total number of packet bytes observed, …\nReturns the total number of packets observed in the …\nPayload after TCP/UDP headers\nSubscribable alias for <code>retina_core::Mbuf</code>\nFor a connection, the bidirectional stream of packets in …\nFor a connection, the bidirectional stream of packets in …\nFor a connection, an originator’s (unidirectional) …\nFor a connection, an originator’s (unidirectional) …\nFor a connection, an originator’s (unidirectional) …\nFor a connection, an originator’s (unidirectional) …\nPasic raw packet bytes.\nFor a connection, a responder’s (unidirectional) stream …\nFor a connection, a responder’s (unidirectional) stream …\nFor a connection, a responder’s (unidirectional) stream …\nFor a connection, a responder’s (unidirectional) stream …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe raw packet data.\nThe raw packet data.\nThe raw packet data.\nThe raw packet data.\nThe raw packet data.\nThe src/dst MAC of a connection\nTag Control Information field on the first packet, or none\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCallback timer wrapper\nClear internal data. Should be invoked after delivery.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if the callback should be invoked. Update counters.\nCreate a new CallbackTimer with the given counter type and …\nTo add a datatype, add it to the DATATYPES map This is …\nTo avoid copying, the <code>Tracked</code> structure in the framework …\nThe string literal representing a matched filter.\nA list of all sessions (zero-copy) parsed in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")