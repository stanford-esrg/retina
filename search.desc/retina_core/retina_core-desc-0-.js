searchState.loadedDescShard("retina_core", 0, "An ergonomic framework for high speed network traffic …\nThe Retina runtime.\nConfiguration options.\nPer-core connection state management.\nUtilities for compile-time filter generation and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUtilities for managing and monitoring Retina cores.\nPacket memory buffer management.\nCreates a new runtime from the <code>config</code> settings, filter, …\nProtocol parsing and manipulation.\nReturns the application thread ID of the execution unit.\nReads the timestamp counter (TSC) register.\nRun Retina for the duration specified in the configuration …\nUtility modules.\nConnection tracking options.\nLive statistics display options.\nLogging options.\nMemory pool options.\nStatistics logging and live monitoring operations.\nOffline traffic analysis options.\nLive traffic analysis options.\nNetwork interface options.\nStatistics logging and live monitoring operations.\nRuntime configuration options.\nSink core options.\nThe size of the per-core object cache. It is recommended …\nNumber of mbufs allocated per mempool. The maximum value …\nConnection tracking settings.\nSink core identifier.\nList of packet processing cores used to poll the interface.\nLoads a default configuration file.\nPCI address of interface.\nLog directory path. If logging is enabled, Retina will …\nLive display configuration. Defaults to <code>None</code> (no output).\nIf set, will pass supplementary arguments to DPDK EAL (see …\nIf set, the applicaton will stop after <code>duration</code> seconds. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a list of core IDs assigned to the runtime.\nIf set, will attempt to offload parts of the filter to the …\nHow often to log port statistics (in milliseconds). …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nListen bind address for Prometheus metrics. Defaults to …\nLoads a configuration file from <code>path</code>.\nLogging configuration. Defaults to <code>None</code> (no logs).\nMain core identifier. Initializes and manages packet …\nMaximum number of connections that can be tracked …\nMaximum number of out-of-order packets allowed per TCP …\nPer-mempool settings.\nDisplay live mempool usage. Defaults to <code>true</code>.\nLive performance monitoring. Defaults to <code>None</code>.\nMaximum transmission unit (in bytes) allowed for ingress …\nMaximum frame size, equivalent to MTU on a live interface. …\nNumber of RSS redirection table buckets to use for receive …\nSets the number of memory channels to use.\nThe number of RX descriptors per receive queue. Defaults …\nOffline mode settings. Either <code>online</code> or <code>offline</code> must be …\nOnline mode settings. Either <code>online</code> or <code>offline</code> must be …\nPath to packet capture (pcap) file.\nListen port for Prometheus metrics.\nList of live port statistics to display.\nList of port statistics to log.\nList of network interfaces to read from.\nPrometheus metrics exporter server. Defaults to <code>None</code>.\nWhether promiscuous mode is enabled for all ports. …\nSink core configuration. Defaults to <code>None</code>.\nSuppress DPDK runtime logging and telemetry output. …\nInactivity time between the first and second packet of a …\nA TCP connection can be inactive for up to this amount of …\nDisplay live throughputs. Defaults to <code>true</code>.\nFrequency to check for inactive streams (in milliseconds). …\nA UDP connection can be inactive for up to this amount of …\nManages state for all TCP and UDP connections.\nPer-connection state management.\nBidirectional connection identifiers.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA generic connection identifier.\nConnection 5-tuple.\nConverts a 5-tuple to a non-directional connection …\nUtility for returning a string representation of the dst. …\nUtility for returning a string representation of the dst. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new 5-tuple from <code>ctxt</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe originator connection endpoint.\nThe layer-4 protocol.\nThe responder connection endpoint.\nUtility for returning a string representation of the …\nParsed transport-layer context from the packet used for …\nTransport-layer protocol data unit for stream reassembly …\nRaw acknowledgment number of segment.\nTransport layer context.\n<code>true</code> if segment is in the direction of orig -&gt; resp.\nDestination socket address.\nTCP flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLength of the payload in bytes.\nInternal packet buffer containing frame data.\nOffset into the mbuf where payload begins.\nL4 protocol.\nRaw sequence number of segment.\nSource socket address.\nFilter applied to disambiguate and deliver matched …\nSoftware filter applied to each packet. Will drop, …\nFilter applied to disambiguate and deliver matched …\nFilter applied to the first packet of a connection to …\nFilter applied when the application-layer protocol is …\nFilter applied when the application-layer session is …\nFor each connection, the Retina framework applies multiple …\nUtilities for defining how a subscribed datatype is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nActions maintained per-connection\nDeliver connection data (via the ConnectionDelivery …\nStore packets in this connection in tracked data for …\nForward new packet to connection tracker Should only be …\nDeliver future packet data (via the PacketDelivery filter) …\nStore packets in this connection in tracked data for a …\nOnce the application-layer protocl is identified, apply …\nProbe for (identify) the application-layer protocol\nThe subscribable type “update” methods should be …\nOnce the application-layer session has been parsed, …\nOnce the application-layer session has been parsed, apply …\nOnce the application-layer session has been parsed, store …\nInvoke any active streaming callbacks.\nThe subscribable type “update” methods should be …\nReturns a bitmask that contains all values.\nReturns a bitmask that contains all values.\nReturns a bitmask that contains all flags.\nReturns the bitwise AND of the bitmask.\nReturns the underlying bits of the bitmask.\nReturns <code>true</code> if <code>self</code> contains all values of <code>other</code>.\nAll actions (terminal and non-terminal) that should be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a bitmask that contains all flags.\nReturns <code>true</code> if <code>self</code> intersects with any value in <code>other</code>, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the bitmask contains all values.\nReturns <code>true</code> if the bitmask contains all values.\nReturns <code>true</code> if the bitmask contains all flags.\nReturns <code>true</code> if the bitmask contains all flags.\nReturns <code>true</code> if the bitmask does not contain any values.\nReturns a bitmask that does not contain any values.\nReturns the bitwise NOT of the bitmask.\nReturns the bitwise OR of the bitmask.\nAll actions that should continue to be performed …\nReturns a bitmask that only has bits corresponding to flags\nReturns the bitwise XOR of the bitmask.\nDeliver at (UDP/TCP) connection termination\nDescribes a single subscribable datatype and the …\nThe abstraction levels for subscribable datatypes These …\nDeliver per-packet If needed, packets will be cached by …\nDeliver when session is parsed Note: only one …\nDeliver at any point in the connection Static-only …\nAssociated data for streaming callbacks.\nApplicable only to subscriptions. Indicates that the …\nSpecification for one complete subscription A subscription …\nThe name of the datatype as a string, used in code …\nCallback as string. This is used in code generation and …\nWhether a datatype at this Level can be delivered in a …\nDatatype(s) invoked in callback\nString representation of the filter used in this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe Level of the full subscription, indicating the …\nThe Level of this DataType\nTrue if the datatype requires tracking packets\nTrue if  the datatype requires parsing application-level …\nTrue if the datatype requires reassembly (for <code>update</code>)\nTrue if the datatype requires invoking <code>update</code> method …\nCreates a typical datatype for tracking per-connection …\nCreates a typical datatype for packet data (Packet-level, …\nCreates a typical datatype for a packet list …\nCreates a typical datatype for parsed application-layer …\nCreates a typical datatype for static data (Static-level, …\nA vector of the application-layer parsers required by this …\nTrue if the datatype requires the framework to buffer …\nPerform basic checks on the subscription specification\nAn identifier for a core running Retina (sink, monitoring, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe core ID as u32, primarily for DPDK functions\nPacket buffer manipulation.\nA packet buffer.\nReturns the contents of the Mbuf as a byte slice.\nReturns the length of the data in the Mbuf.\nReturns the argument unchanged.\nReturns a byte slice of data with length count at offset.\nCalls <code>U::from(self)</code>.\nTypes for parsing and manipulating packet-level network …\nTypes for parsing and manipulating stream-level network …\nRepresents a single packet.\nRepresents a packet header.\nEthernet packet.\nOffset from the beginning of the header to the start of …\nIPv4 packet.\nIPv6 packet.\nOffset from beginning of the header to start of the …\nReference to the underlying packet buffer.\nNext level IANA protocol number.\nOffset from the beginning of the packet buffer to the …\nParses a <code>Packet</code> from the outer encapsulating <code>Packet</code>’s …\nParses the <code>Packet</code>’s payload as a new <code>Packet</code> of type <code>T</code>.\nSize of the fixed portion of the header in bytes.\nTCP packet.\nUDP packet.\nAn Ethernet frame.\nReturns the destination MAC address.\nReturns the encapsulated protocol identifier for untagged …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the source MAC address.\nReturns the Tag Control Information field from a 802.1Q …\nAn IPv4 packet.\nReturns <code>true</code> if the Don’t Fragment flag is set.\nReturns the differentiated services code point (DSCP).\nReturns the differentiated services field.\nReturns the receiver’s IPv4 address.\nReturns the explicit congestion notification (ECN).\nReturns the 3-bit IP flags.\nReturns the 16-bit field containing the 3-bit flags and …\nReturns the fragment offset in units of 8 bytes.\nReturns the argument unchanged.\nReturns the IPv4 header checksum.\nReturns the identification field.\nReturns the header length measured in 32-bit words (IHL).\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the More Fragments flag is set.\nReturns the encapsulated protocol identifier.\nReturns <code>true</code> if the Reserved flag is set.\nReturns the sender’s IPv4 address.\nReturns the time to live (TTL) of the packet.\nReturns the total length of the packet in bytes, including …\nReturns the type of service (former name of the …\nReturns the IP protocol version.\nReturns the 8-bit field containing the version and IHL.\nAn IPv6 packet.\nReturns the differentiated services code point (DSCP).\nReturns the receiver’s IPv6 address.\nReturns the explicit congestion notification (ECN).\nReturns the flow label.\nReturns the argument unchanged.\nReturns hop limit/time to live of the packet.\nCalls <code>U::from(self)</code>.\nReturns the encapsulated protocol identifier.\nReturns the length of the payload in bytes.\nReturns the sender’s IPv6 address.\nReturns the traffic class (former name of differentiated …\nReturns the IP protocol version.\nReturns the 32-bit field containing the version, traffic …\nTCP assigned protocol number.\nA TCP packet.\nReturns <code>true</code> if the acknowledgment flag is set.\nReturns the acknowledgment number.\nReturns the 16-bit checksum field.\nReturns <code>true</code> if the congestion window reduced flag is set.\nReturns the header length measured in 32-bit words.\nReturns the 8-bit field containing the data offset, 3 …\nReturns the receiving port.\nReturns <code>true</code> if the ECN-Echo flag is set.\nReturns <code>true</code> if the FIN flag is set.\nReturns the 8-bit TCP flags.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the (historical) nonce sum flag is set.\nReturns <code>true</code> if the push flag is set.\nReturns the reserved bits.\nReturns <code>true</code> if the reset flag is set.\nReturns the sequence number.\nReturns the sending port.\nReturns <code>true</code> if the synchronize flag is set.\nReturns <code>true</code> if both <code>SYN</code> and <code>ACK</code> flags are set.\nReturns <code>true</code> if the urgent pointer flag is set.\nReturns the urgent pointer.\nReturns the size of the receive window in window size …\nUDP assigned protocol number.\nA UDP packet.\nReturns the UDP checksum.\nReturns the receiving port.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the length of packet (both header and payload) in …\nReturns the sending port.\nThe set of application-layer protocol parsers required to …\nKnown application-layer protocol, needs parsing.\nUnknown application-layer protocol, needs probing.\nNo more sessions expected in connection.\nDNS transaction parsing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHTTP transaction parsing.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQUIC protocol parser.\nSSH handshake parsing.\nTLS handshake parsing.\nRData types.\nParsed DNS transaction contents.\nA DNS Query.\nA DNS Record.\nA DNS Response.\nA DNS mail exchange (MX) record.\nA DNS start of authority (SOA) record.\nA DNS service (SRV) record.\nReturns a string representation of the response additionals\nReturns a string representation of the answers\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a string representation of the response nameservers\nDNS transaction parser.\nDNS Query.\nReturns the DNS query domain name, or <code>&quot;&quot;</code> if no query was …\nReturns a string representation of the response\nDNS Response.\nDNS transaction ID.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParsed HTTP transaction contents.\nAn HTTP Request\nAn HTTP Response\nReturns HTTP cookies sent by the client, or <code>&quot;&quot;</code> if it does …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the domain name of the server specified by the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the HTTP method, or <code>&quot;&quot;</code> if it does not exist.\nHTTP transaction parser.\nHTTP Request.\nReturns the size of the request body in bytes, or <code>0</code> if it …\nReturns the media type of the request resource, or <code>&quot;&quot;</code> if …\nReturns the form of encoding used to transfer the request …\nReturns the HTTP request version, or <code>&quot;&quot;</code> if it does not …\nHTTP Response.\nReturns the size of the request body in bytes, or <code>0</code> if it …\nReturns the media type of the response resource, or <code>&quot;&quot;</code> if …\nReturns the form of encoding used to transfer the response …\nReturns the HTTP response version, or <code>&quot;&quot;</code> if it does not …\nReturns the HTTP status code, or <code>0</code> if it does not exist.\nReturns the HTTP status tet, or <code>0</code> if it does not exist.\nThe pipelined depth into the connection of this …\nReturns the request URI, or <code>&quot;&quot;</code> if it does not exist.\nReturns the user agent string of the user agent, or <code>&quot;&quot;</code> if …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParsed Quic connections\nErrors Thrown throughout QUIC parsing. These are handled …\nQuic Long Header\nParsed Quic Packet contents\nQuic Short Header\nReturns the destination connection ID of the Quic packet …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the header type of the Quic packet (ie. “long” …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQuic Long header\nReturns the packet type of the Quic packet\nParses Quic packet from bytes\nReturns the number of bytes in the payload of the Quic …\nThe number of bytes contained in the estimated payload\nReturns the source connection ID of the Quic packet or an …\nQuic Short header\nProcesses the connection ID bytes array to a hex string\nReturns the version of the Quic packet\nParsed SSH handshake contents.\nA parsed Diffie-Hellman Key Exchange message sent by the …\nA parsed Diffie-Hellman Key Exchange message sent by the …\nA parsed SSH Key Exchange message.\nA parsed SSH Protocol Version Exchange message.\nClient Diffie-Hellman Key Exchange message.\nClient New Keys message.\nClient protocol version exchange message.\nReturns comments, or <code>&quot;&quot;</code> if there are no comments, in the …\nReturns comments, or <code>&quot;&quot;</code> if there are no comments, in the …\nReturns the compression algorithms supported by the client.\nReturns the compression algorithms supported by the server.\nReturns the symmetric encryption algorithms (ciphers) …\nReturns the symmetric encryption algorithms (ciphers) …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the key exchange algorithms used in SSH key …\nKey Exchange message.\nReturns the cookie used in SSH key exchange.\nReturns the language tags (if any) supported by the client.\nReturns the language tags (if any) supported by the server.\nReturns the MAC algorithms supported by the client.\nReturns the MAC algorithms supported by the server.\nSSH parser.\nReturns the SSH protocol version used by the client (e.g. …\nReturns the SSH protocol version used by the server (e.g. …\nServer Diffie-Hellman Key Exchange message.\nReturns the algorithms supported for the server host key.\nServer New Keys message.\nServer protocol version exchange message.\nReturns the SSH software version used by the client.\nReturns the SSH software version used by the server.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA raw X509 certificate.\nFinite-field Diffie-Hellman parameters sent by the client …\nElliptic-curve Diffie-Hellman parameters sent by the …\nA parsed TLS ClientHello message.\nKey data sent by the client in a ClientKeyExchange message.\nStores the encrypted premaster secret sent by the client …\nA TLS 1.3 key share entry.\nFinite-field Diffie-Hellman parameters sent by the server …\nElliptic-curve Diffie-Hellman parameters sent by the …\nA parsed TLS ServerHello message.\nKey data sent by the server in a ServerKeyExchange message.\nRSA parameters sent by the server in a ServerKeyExchange …\nParsed TLS handshake contents.\nReturns the cipher suite name chosen by the server, or <code>&quot;&quot;</code> …\nReturns the cipher suite chosen by the server, or <code>None</code> if …\nReturns the list of ALPN protocol names supported by the …\nClient Certificate chain.\nReturns the list of cipher suite names supported by the …\nReturns the list of compression method identifiers …\nReturns the list of extension names sent by the client.\nClientHello message.\nClientKeyExchange message (TLS 1.2 or earlier).\nReturns the hex-encoded client random, or <code>&quot;&quot;</code> if no …\nReturns the list of signature algorithm names supported by …\nReturns the version identifier specified in the …\nReturns the compression method identifier chosen by the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the JA3 fingerprint.\nReturns the client JA3 string, or <code>&quot;&quot;</code> if no ClientHello was …\nReturns the JA3S fingerprint.\nReturns the server JA3S string, or <code>&quot;&quot;</code> if no ServerHello …\nTLS handshake parser.\nServer Certificate chain.\nReturns the list of extension names sent by the server.\nServerHello message.\nServerKeyExchange message (TLS 1.2 or earlier).\nReturns the hex-encoded server random, or <code>&quot;&quot;</code> if no …\nReturns the version identifier specified in the …\nReturns the name of the server the client is trying to …\nReturns the negotiated TLS handshake version identifier, …\nParses a single TLS handshake per connection.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRetina uses prometheus to report metrics. You can use this …\nHelper functions for Base64 encoding and decoding.\nWrapper types for converting packet data to/from network …\nDecodes Base64 string as a byte vector.\nEncodes byte slice as a Base64 string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n128-bit unsigned integer in big-endian order.\n16-bit unsigned integer in big-endian order.\n32-bit unsigned integer in big-endian order.\n64-bit unsigned integer in big-endian order.")